# experimenting to find signature and verification -- which algorithm used?
# experiments incomplete

from ecdsa import VerifyingKey, NIST256p
import ecdsa
from hashlib import sha256

# some items from the decoded cbor that I suspect may have cryptographic significance
key1 = bytes.fromhex("96313D6C63E24E3372742BFDB1A33BA2C897DCD68AB8C753E4FBD48DCA6B7F9A")
key2 = bytes.fromhex("1FB3269EDD418857DE1B39A4E4A44B92FA484CAA722C228288F01D0C03A2C3D6")

sig1 = bytes.fromhex("59E64205DF1E2F708DD6DB0847AED79FC7C0201D80FA55BADCAF2E1BCF5902E1E5A62E4832044B890AD85AA53F129134775D733754D7CB7A413766AEFF13CB2E")
sig2 = bytes.fromhex("308201EF30820195A00302010202143C4416EED784F3B413E48F56F075ABFA6D87EB84300A06082A8648CE3D"
"04030230233114301206035504030C0B75746F7069612069616361310B3009060355040613025553301E170D32"
"30313030313030303030305A170D3231313030313030303030305A30213112301006035504030C0975746F7069"
"61206473310B30090603550406130255533059301306072A8648CE3D020106082A8648CE3D03010703420004AC"
"E7AB7340E5D9648C5A72A9A6F56745C7AAD436A03A43EFEA77B5FA7B88F0197D57D8983E1B37D3A539F4D58836"
"5E38CBBF5B94D68C547B5BC8731DCD2F146BA381A83081A5301E0603551D120417301581136578616D706C6540"
"6578616D706C652E636F6D301C0603551D1F041530133011A00FA00D820B6578616D706C652E636F6D301D0603"
"551D0E0416041414E29017A6C35621FFC7A686B7B72DB06CD12351301F0603551D2304183016801454FA2383A0"
"4C28E0D930792261C80C4881D2C00B300E0603551D0F0101FF04040302078030150603551D250101FF040B3009"
"060728818C5D050102300A06082A8648CE3D040302034800304502210097717AB9016740C8D7BCDAA494A62C05"
"3BBDECCE1383C1ACA72AD08DBC04CBB202203BAD859C13A63C6D1AD67D814D43E2425CAF90D422422C04A8EE03"
"04C0D3A68D")

# this is all the curve_names available
curve_names = ['NIST192p', 'NIST224p', 'NIST256p', 'NIST384p', 'NIST521p', 'SECP256k1', 'BRAINPOOLP160r1', 'BRAINPOOLP192r1', 'BRAINPOOLP224r1', 'BRAINPOOLP256r1', 'BRAINPOOLP320r1', 'BRAINPOOLP384r1', 'BRAINPOOLP512r1', 'SECP112r1', 'SECP112r2', 'SECP128r1', 'SECP160r1', 'Ed25519', 'Ed448', 'BRAINPOOLP160t1', 'BRAINPOOLP192t1', 'BRAINPOOLP224t1', 'BRAINPOOLP256t1', 'BRAINPOOLP320t1', 'BRAINPOOLP384t1', 'BRAINPOOLP512t1']

for name in curve_names:
    curve = ecdsa.curves.curve_by_name(name)
    try:
        print(name)
#        vk1 = VerifyingKey.from_string(key1, curve = curve)
#        print("SUCCESS " + name)
    except:
        pass
curve = ecdsa.curves.curve_by_name("Ed25519")
vk1 = VerifyingKey.from_string(key1, curve = curve)
vk2 = VerifyingKey.from_string(key2, curve = curve)

pk_x = bytes.fromhex("59fc5c8006ac52a39479c1aabacbbd1d56fcb98feeaa182334c45b3a7609029e")
pk_y = bytes.fromhex("3f501e5e20830c70b5a2ff3a0690a22e9782bb2c1a76fe798952daec599edd4d")
pk = VerifyingKey.from_string(pk_x + pk_y, curve = ecdsa.curves.curve_by_name("SECP256k1"))

# public_key.verify(sig, message, sha256, sigdecode=sigdecode_der)
print(vk1.verify(sig1, sig1, sha256))
